---
title: Software
description: Installs preferred softwares 
privilege: TrustedInstaller
actions:

  - !writeStatus: {status: 'Installing Revision Tool'}
  - !powerShell: {command: "& { Invoke-WebRequest ((Invoke-RestMethod -Uri 'https://api.github.com/repos/meetrevision/revision-tool/releases/latest' -Method Get | ConvertTo-Json | ConvertFrom-Json).assets | where-object { $_.name -eq 'RevisionTool-Setup.exe' }).browser_download_url -OutFile \"$env:TEMP\\RevisionTool-Setup.exe\" }" }
  - !cmd: {command: 'call "%temp%\RevisionTool-Setup.exe" /VERYSILENT /TASKS="desktopicon"', weight: 150}

    # Not an ideal place to put this - Disable Defender
  - !writeStatus: {status: 'Disabling Windows Defender'}
  - !run: {path: "%ProgramFiles(x86)%\\Revision Tool\\data\\flutter_assets\\additionals", exe: "DisableWD.bat", wait: true, weight: 100}

  - !writeStatus: {status: 'Updating Winget'}
  - !powerShell:
    weight: 50
    runas: currentUserElevated
    command: |
      $productName = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -Name ProductName
      $path = Join-Path ${env:ProgramFiles(x86)} 'Revision Tool'

      if (Test-Path $path) {
        $file = Join-Path $path 'revitool.exe'
        $args = if ($productName -like '*LTSC*') {'msstore-apps --id 9NBLGGH4NNS1 --ring RP'} else {'msstore-apps --id 9WZDNCRFJBMP --id 9NBLGGH4NNS1 --ring RP'}
        
        Start-Process -FilePath $file -ArgumentList $args -Wait -WindowStyle Hidden
        }
        Add-AppPackage 'https://cdn.winget.microsoft.com/cache/source.msix' -ForceApplicationShutdown
      }

  # - !writeStatus: {status: 'Installing Chocolatey'}
  # - !powerShell:
  #   command: 'Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(''https://community.chocolatey.org/install.ps1''))'
  #   weight: 50

  # - !writeStatus: {status: "Installing .NET Framework 3.5", option: "dotnet35"}
  # - !cmd:
  #   command: '"%ProgramData%\chocolatey\bin\choco.exe" install -y --force --allow-empty-checksums dotnet3.5'
  #   weight: 150
  #   option: "dotnet35"

  - !writeStatus: {status: 'Downloading Brave', option: "browser-brave"}
  - !powerShell: {command: "& { Invoke-WebRequest ((Invoke-RestMethod -Uri 'https://api.github.com/repos/brave/brave-browser/releases/latest' -Method Get | ConvertTo-Json | ConvertFrom-Json).assets | where-object { $_.name -eq 'BraveBrowserStandaloneSetup.exe' }).browser_download_url -OutFile \"$env:TEMP\\BraveBrowserStandaloneSetup.exe\" }" , weight: 150, option: "browser-brave"}

  - !writeStatus: {status: 'Installing Brave', option: "browser-brave"}
  - !cmd: {command: 'call "%temp%\BraveBrowserStandaloneSetup.exe" /silent /install', runas: currentUserElevated, weight: 50, option: "browser-brave"}

  - !writeStatus: {status: 'Configuring Brave', option: "browser-brave"}
  - !cmd:
    exeDir: true
    command: 'robocopy "BraveSoftware" "%ProgramFiles%\BraveSoftware" /E /IM /IT /NP'
    weight: 20
    option: "browser-brave"

  #   # Firefox (winget)
  # - !writeStatus: {status: 'Installing Firefox', option: "browser-firefox"}
  # - !cmd:
  #   command: 'winget install Mozilla.Firefox --silent --accept-source-agreements --accept-package-agreements'
  #   weight: 150
  #   runas: currentUserElevated
  #   option: "browser-firefox"

  # - !writeStatus: {status: 'Installing Firefox', option: "browser-firefox"}
  # - !run:
  #   path: '%ProgramData%\chocolatey\bin'
  #   exe: 'choco.exe'
  #   args: 'install -y --allow-empty-checksums firefox'
  #   weight: 150
  #   option: "browser-firefox"

  # - !writeStatus: {status: 'Configuring Firefox', option: "browser-firefox"}
  # - !run:
  #   exeDir: true
  #   exe: 'FIREFOX.cmd'
  #   weight: 20
  #   option: "browser-firefox"